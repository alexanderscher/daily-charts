name: Deploy Charts
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::742736545134:role/store-turn-github-action
          aws-region: us-east-1

      - name: Check STS Identity
        run: aws sts get-caller-identity

      - name: Cleanup ECR Images
        run: |
          IMAGES=$(aws ecr list-images --repository-name spotify-charts-ecr --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name spotify-charts-ecr \
              --image-ids "$IMAGES"
          else
            echo "No images to delete."
          fi

          IMAGES=$(aws ecr list-images --repository-name velocity-ecr --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name velocity-ecr \
              --image-ids "$IMAGES"
          else
            echo "No images to delete."
          fi

          IMAGES=$(aws ecr list-images --repository-name apple-charts-ecr --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name apple-charts-ecr \
              --image-ids "$IMAGES"
          else
            echo "No images to delete."
          fi

          IMAGES=$(aws ecr list-images --repository-name shazam-charts-ecr --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name shazam-charts-ecr \
              --image-ids "$IMAGES"
          else
            echo "No images to delete."
          fi

          IMAGES=$(aws ecr list-images --repository-name no-track-ecr --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name no-track-ecr \
              --image-ids "$IMAGES"
          else
            echo "No images to delete."
          fi

      # Step 3: Create the terraform-secrets.tfvars file from GitHub secrets
      - name: Create terraform-secrets.tfvars
        run: |
          cat <<EOF > terraform-secrets.tfvars
          apple_team_id = "${{ secrets.APPLE_TEAM_ID }}"
          apple_key_id = "${{ secrets.APPLE_KEY_ID }}"
          apple_private_key = "${{ secrets.APPLE_PRIVATE_KEY }}"
          aws_access_key_id = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          alex = "${{ secrets.ALEX }}"
          alex_mail = "${{ secrets.ALEX_MAIL }}"
          conor = "${{ secrets.CONOR }}"
          ari = "${{ secrets.ARI }}"
          laura = "${{ secrets.LAURA }}"
          micah = "${{ secrets.MICAH }}"
          spotify_chart_username = "${{ secrets.SPOTIFY_CHART_USERNAME }}"
          spotify_chart_password = "${{ secrets.SPOTIFY_CHART_PASSWORD }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          spotify_client_id = "${{ secrets.SPOTIFY_CLIENT_ID }}"
          spotify_client_secret = "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
          spotify_user_id = "${{ secrets.SPOTIFY_USER_ID }}"
          spotify_client_id_l2tk = "${{ secrets.SPOTIFY_CLIENT_ID_L2TK }}"
          spotify_client_secret_l2tk = "${{ secrets.SPOTIFY_CLIENT_SECRET_L2TK }}"
          spotify_user_id_l2tk = "${{ secrets.SPOTIFY_USER_ID_L2TK }}"
          spotify_client_id_alena = "${{ secrets.SPOTIFY_CLIENT_ID_ALENA }}"
          spotify_client_secret_alena = "${{ secrets.SPOTIFY_CLIENT_SECRET_ALENA }}"
          spotify_user_id_alena = "${{ secrets.SPOTIFY_USER_ID_ALENA }}"
          google_private_key = <<EOF2
          ${{ secrets.GOOGLE_PRIVATE_KEY }}
          EOF2
          google_client_email = "${{ secrets.GOOGLE_CLIENT_EMAIL }}"
          google_project_id = "${{ secrets.GOOGLE_PROJECT_ID }}"
          EOF

      # Step 4: Set up Docker Buildx (needed for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Log in to Amazon ECR to push the image
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 742736545134.dkr.ecr.us-east-1.amazonaws.com

      # Step 6: Build and Push the Docker image to ECR
      - name: Build and Push Docker Image to ECR
        run: |
          docker buildx build --platform linux/amd64 -t 742736545134.dkr.ecr.us-east-1.amazonaws.com/spotify-charts-ecr:latest --push --provenance=false ./spotify
          docker buildx build --platform linux/amd64 -t 742736545134.dkr.ecr.us-east-1.amazonaws.com/velocity-ecr:latest --push --provenance=false ./velocity
          docker buildx build --platform linux/amd64 -t 742736545134.dkr.ecr.us-east-1.amazonaws.com/apple-charts-ecr:latest --push --provenance=false ./apple
          docker buildx build --platform linux/amd64 -t 742736545134.dkr.ecr.us-east-1.amazonaws.com/shazam-charts-ecr:latest --push --provenance=false ./shazam
          docker buildx build --platform linux/amd64 -t 742736545134.dkr.ecr.us-east-1.amazonaws.com/no-track-ecr:latest --push --provenance=false ./notrack

      # Step 7: Update the Lambda function with the new image
      - name: Update Lambda Function with New Image
        run: |
          aws lambda update-function-code --function-name spotify-charts --image-uri 742736545134.dkr.ecr.us-east-1.amazonaws.com/spotify-charts-ecr:latest
          aws lambda update-function-code --function-name velocity --image-uri 742736545134.dkr.ecr.us-east-1.amazonaws.com/velocity-ecr:latest
          aws lambda update-function-code --function-name apple-charts --image-uri 742736545134.dkr.ecr.us-east-1.amazonaws.com/apple-charts-ecr:latest
          aws lambda update-function-code --function-name shazam-charts --image-uri 742736545134.dkr.ecr.us-east-1.amazonaws.com/shazam-charts-ecr:latest
          aws lambda update-function-code --function-name no-track --image-uri 742736545134.dkr.ecr.us-east-1.amazonaws.com/no-track-ecr:latest

      # Step 8: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 9: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: ./tf/

      # Step 10: Validate Terraform configuration
      - name: Validate Terraform
        run: terraform validate
        working-directory: ./tf/

      # Step 11: Plan Terraform changes
      - name: Terraform Plan
        run: terraform plan -var-file=$GITHUB_WORKSPACE/terraform-secrets.tfvars
        working-directory: ./tf/

      # Step 12: Apply Terraform changes
      - name: Apply Terraform Changes
        run: terraform apply -var-file=$GITHUB_WORKSPACE/terraform-secrets.tfvars
        working-directory: ./tf/
